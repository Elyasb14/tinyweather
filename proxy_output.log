info: [32mProxy TCP Server listening on[0m: 127.0.0.1:8081
info: [32mConnection established with[0m: 127.0.0.1:52684
info: [32mHeader[0m: Host localhost:8081
info: [32mHeader[0m: User-Agent curl/8.7.1
info: [32mHeader[0m: Accept */*
info: [32mHeader[0m: Sensor BME680
info: [32mHeader[0m: Sensor RG15
info: [32mProxy initializing communication with remote node[0m: 127.0.0.1:8080
info: [32mPacket Sent[0m: lib.tcp.Packet{ .version = 1, .type = lib.tcp.PacketType.SensorRequest, .data = { 0, 1 } }
info: [32mBytes read by stream[0m: 34
info: [32mDecoded sensor response[0m: lib.tcp.SensorResponse{ .request = lib.tcp.SensorRequest{ .sensors = { lib.tcp.Sensors.BME680, lib.tcp.Sensors.RG15 } }, .data = { lib.tcp.SensorData{ .sensor_type = lib.tcp.Sensors.BME680, .val = { ... } }, lib.tcp.SensorData{ .sensor_type = lib.tcp.Sensors.RG15, .val = { ... } } } }
info: [32mData received from node[0m: { nan, nan, nan, nan }
[32mFrom sensor[0m: BME680
info: [32mData received from node[0m: { nan, nan, nan, nan }
[32mFrom sensor[0m: RG15
info: [32mPrometeus string being sent[0m:
[36m# HELP BMETemp BME680
# TYPE BMETemp gauge
BMETemp nan

# HELP BMEPres BME680
# TYPE BMEPres gauge
BMEPres nan

# HELP BMEHum BME680
# TYPE BMEHum gauge
BMEHum nan

# HELP BMEGas BME680
# TYPE BMEGas gauge
BMEGas nan

# HELP RG15RainAcc RG15
# TYPE RG15RainAcc gauge
RG15RainAcc nan

# HELP RG15RainEventAcc RG15
# TYPE RG15RainEventAcc gauge
RG15RainEventAcc nan

# HELP RG15RainTotalAcc RG15
# TYPE RG15RainTotalAcc gauge
RG15RainTotalAcc nan

# HELP RG15RainRInt RG15
# TYPE RG15RainRInt gauge
RG15RainRInt nan

[0m
info: [32mStream closed[0m: net.Stream{ .handle = 4 }
info: [32mConnection established with[0m: 127.0.0.1:52687
info: [32mHeader[0m: Host localhost:8081
info: [32mHeader[0m: User-Agent curl/8.7.1
info: [32mHeader[0m: Accept */*
info: [32mHeader[0m: Sensor BME680
info: [32mHeader[0m: Sensor RG15
info: [32mProxy initializing communication with remote node[0m: 127.0.0.1:8080
info: [32mPacket Sent[0m: lib.tcp.Packet{ .version = 1, .type = lib.tcp.PacketType.SensorRequest, .data = { 0, 1 } }
info: [32mBytes read by stream[0m: 34
info: [32mDecoded sensor response[0m: lib.tcp.SensorResponse{ .request = lib.tcp.SensorRequest{ .sensors = { lib.tcp.Sensors.BME680, lib.tcp.Sensors.RG15 } }, .data = { lib.tcp.SensorData{ .sensor_type = lib.tcp.Sensors.BME680, .val = { ... } }, lib.tcp.SensorData{ .sensor_type = lib.tcp.Sensors.RG15, .val = { ... } } } }
info: [32mData received from node[0m: { nan, nan, nan, nan }
[32mFrom sensor[0m: BME680
info: [32mData received from node[0m: { nan, nan, nan, nan }
[32mFrom sensor[0m: RG15
info: [32mPrometeus string being sent[0m:
[36m# HELP BMETemp BME680
# TYPE BMETemp gauge
BMETemp nan

# HELP BMEPres BME680
# TYPE BMEPres gauge
BMEPres nan

# HELP BMEHum BME680
# TYPE BMEHum gauge
BMEHum nan

# HELP BMEGas BME680
# TYPE BMEGas gauge
BMEGas nan

# HELP RG15RainAcc RG15
# TYPE RG15RainAcc gauge
RG15RainAcc nan

# HELP RG15RainEventAcc RG15
# TYPE RG15RainEventAcc gauge
RG15RainEventAcc nan

# HELP RG15RainTotalAcc RG15
# TYPE RG15RainTotalAcc gauge
RG15RainTotalAcc nan

# HELP RG15RainRInt RG15
# TYPE RG15RainRInt gauge
RG15RainRInt nan

[0m
info: [32mStream closed[0m: net.Stream{ .handle = 4 }
